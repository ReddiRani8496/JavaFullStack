A class can be declared in any scope. Classes defined inside of other classes are known as nested classes. There are four categories of nested classes.

Top-level nested classes 
Non-static inner classes
Local classes
Anonymous Inner Classes



Top-level nested classes 

Declared as a class member with static modifier. 
Technically, a static nested class is not an inner class, but instead is considered a top-level nested class
Just like other static features of a class. Can be accessed / instantiated without an instance of the outer class. Can access only static members of outer class. Can’t access instance variables or methods. 
Because the nested class is static, it does not share any special relationship with an instance of the outer class. In fact, you don’t need an instance of the outer class to instantiate a static nested class.
Instantiating a static nested class requires using both the outer and nested class names as follows:

BigOuter.Nested n = new BigOuter.Nested();



Non-static inner classes
A “regular” inner class is declared inside the curly braces of another class, but outside any method or other code block.
An inner class is a full-fledged member of the enclosing (outer) class, so it can be marked with an access modifier as well as the abstract or final modifiers 
An inner class instance shares a special relationship with an instance of the enclosing class. This relationship gives the inner class access to all of the outer class’ members, including those marked private.
Cannot have any static members.
Can have any access modifier.




Local classes
Defined inside a block (could be a method, a constructor, a local block, a static initializer or an instance initializer). Cannot be specified with static modifier.
Cannot have any access modifier (since they are effectively local to the block)
Cannot declare any static members.(Even declared in a static context)
Can access all the features of the enclosing class (because they are defined inside the method of the class) but can access only final variables defined inside the method (including method arguments). This is because the class can outlive the method, but the method local variables will go out of scope – in case of final variables, compiler makes a copy of those variables to be used by the class. (New meaning for final)




Anonymous Inner Classes
Anonymous classes are defined where they are constructed. They can be created wherever a reference expression can be used.
Anonymous classes cannot have explicit constructors. Instance initializers can be used to achieve the functionality of a constructor.
Anonymous inner classes have no name, and their type must be either a subclass of the named type or an implementer of the named interface.
An anonymous inner class is always created as part of a statement, so don’t forget to close the statement after the class definition, with a curly brace. This is one of the rare times you’ll see a curly brace followed by a semicolon in Java.